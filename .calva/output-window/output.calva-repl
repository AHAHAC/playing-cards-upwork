; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; nREPL Connection was closed
; Starting Jack-in Terminal: cmd.exe /d /c lein update-in :dependencies conj [nrepl,"0.8.3"] -- update-in :plugins conj [cider/cider-nrepl,"0.25.11"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉playing-cards.core꞉> 
; Jack-in done.
clj꞉playing-cards.core꞉> 
; Syntax error reading source at (REPL:135:78).
; Unsupported escape character: \p
clj꞉playing-cards.core꞉> 
; Execution error (ExceptionInfo) at next.jdbc.connection/spec->url+etc (connection.clj:208).
; Unknown dbtype: jdbc:sqlite, and :classname not provided.
clj꞉playing-cards.core꞉> 
; Execution error (ExceptionInfo) at next.jdbc.connection/spec->url+etc (connection.clj:208).
; Unknown dbtype: jdbc:sqlite, and :classname not provided.
clj꞉playing-cards.core꞉> 
#:next.jdbc{:update-count 0}
clj꞉playing-cards.core꞉> 
; Execution error (SQLException) at org.sqlite.SQLiteConnection/open (SQLiteConnection.java:226).
; opening db: 'c:/playng-cards.db': Access is denied
clj꞉playing-cards.core꞉> 
; Execution error (SQLException) at org.sqlite.SQLiteConnection/open (SQLiteConnection.java:226).
; opening db: 'c://playng-cards.db': Access is denied
clj꞉playing-cards.core꞉> 
; Execution error (SQLException) at org.sqlite.SQLiteConnection/open (SQLiteConnection.java:226).
; opening db: 'c:\playng-cards.db': Access is denied
clj꞉playing-cards.core꞉> 
; Execution error (SQLiteException) at org.sqlite.core.DB/newSQLException (DB.java:1012).
; [SQLITE_ERROR] SQL error or missing database (table cards already exists)
clj꞉playing-cards.core꞉> 
; Execution error (SQLiteException) at org.sqlite.core.DB/newSQLException (DB.java:1012).
; [SQLITE_ERROR] SQL error or missing database (near "describe": syntax error)
clj꞉playing-cards.core꞉> 
; Execution error (SQLiteException) at org.sqlite.core.DB/newSQLException (DB.java:1012).
; [SQLITE_ERROR] SQL error or missing database (near "describe": syntax error)
clj꞉playing-cards.core꞉> 
#:next.jdbc{:update-count 0}
clj꞉playing-cards.core꞉> 
#:next.jdbc{:update-count 0}
clj꞉playing-cards.core꞉> 
#:next.jdbc{:update-count 0}
clj꞉playing-cards.core꞉> 
#:next.jdbc{:update-count 0}
clj꞉playing-cards.core꞉> 
; Error printing return value (ArityException) at clojure.lang.AFn/throwArity (AFn.java:429).
; Wrong number of args (1) passed to: playing-cards.core/eval9642/fn--9643
clj꞉playing-cards.core꞉> 
; Error printing return value (SQLException) at org.sqlite.SQLiteConnection/checkOpen (SQLiteConnection.java:390).
; database connection closed
clj꞉playing-cards.core꞉> 
; Error printing return value (SQLException) at org.sqlite.SQLiteConnection/checkOpen (SQLiteConnection.java:390).
; database connection closed
clj꞉playing-cards.core꞉> 
nil
clj꞉playing-cards.core꞉> 
#:cards{:linenr 1, :picked "123", :rest "abcv"}
clj꞉playing-cards.core꞉> 
; Error printing return value (SQLException) at org.sqlite.SQLiteConnection/checkOpen (SQLiteConnection.java:390).
; database connection closed
clj꞉playing-cards.core꞉> 
; Error printing return value (SQLException) at org.sqlite.SQLiteConnection/checkOpen (SQLiteConnection.java:390).
; database connection closed
clj꞉playing-cards.core꞉> 
#:cards{:linenr 1, :picked "123", :rest "abcv"}
clj꞉playing-cards.core꞉> 
#:cards{:linenr 1, :picked "123", :rest "abcv"}
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1, :picked "123", :rest "abcv"}
 #:cards{:linenr 2, :picked "123", :rest "456"}
 #:cards{:linenr 3, :picked "234", :rest "xdvgsdfg"}]
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1, :picked "123", :rest "abcv"}
 #:cards{:linenr 2, :picked "123", :rest "456"}
 #:cards{:linenr 3, :picked "234", :rest "xdvgsdfg"}]
clj꞉playing-cards.core꞉> 
#:next.jdbc{:update-count 0}
clj꞉playing-cards.core꞉> 
#:next.jdbc{:update-count 0}
clj꞉playing-cards.core꞉> 
[#:next.jdbc{:update-count 0}]
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1, :picked "123", :rest "456"} #:cards{:linenr 2, :picked "234", :rest "xdvgsdfg"}]
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1, :picked nil, :rest "clojure.lang.LazySeq@7518e0d4"}
 #:cards{:linenr 2, :picked nil, :rest "clojure.lang.LazySeq@8b7b7dc3"}
 #:cards{:linenr 3, :picked nil, :rest "clojure.lang.LazySeq@7b085a56"}]
clj꞉playing-cards.core꞉> 
({:picked nil,
  :rest
  ([1 :DI]
   [13 :HR]
   [6 :DI]
   [4 :DI]
   [3 :DI]
   [11 :DI]
   [6 :SP]
   [9 :CL]
   [11 :HR]
   [9 :SP]
   [5 :CL]
   [6 :CL]
   [11 :SP]
   [4 :SP]
   [7 :CL]
   [8 :HR]
   [7 :DI]
   [1 :SP]
   [9 :DI]
   [11 :CL]
   [10 :SP]
   [5 :HR]
   [1 :HR]
   [6 :HR]
   [10 :DI]
   [7 :HR]
   [5 :SP]
   [4 :CL]
   [1 :CL]
   [10 :HR]
   [7 :SP]
   [3 :CL]
   [3 :SP]
   [12 :SP]
   [13 :SP]
   [4 :HR]
   [13 :CL]
   [5 :DI]
   [2 :HR]
   [3 :HR]
   [13 :DI]
   [12 :DI])}
 {:picked nil,
  :rest
  ([1 :DI]
   [13 :HR]
   [6 :DI]
   [4 :DI]
   [3 :DI]
   [11 :DI]
   [6 :SP]
   [9 :CL]
   [11 :HR]
   [9 :SP]
   [5 :CL]
   [6 :CL]
   [11 :SP]
   [4 :SP]
   [7 :CL]
   [12 :HR]
   [8 :HR]
   [8 :DI]
   [9 :DI]
   [11 :CL]
   [10 :SP]
   [5 :HR]
   [1 :HR]
   [6 :HR]
   [10 :DI]
   [12 :CL]
   [7 :HR]
   [4 :CL]
   [1 :CL]
   [10 :HR]
   [7 :SP]
   [3 :CL]
   [3 :SP]
   [12 :SP]
   [13 :SP]
   [4 :HR]
   [13 :CL]
   [5 :DI]
   [2 :HR]
   [13 :DI]
   [12 :DI]
   [9 :HR])}
 {:picked nil,
  :rest
  ([1 :DI]
   [13 :HR]
   [6 :DI]
   [4 :DI]
   [3 :DI]
   [11 :DI]
   [6 :SP]
   [9 :CL]
   [11 :HR]
   [9 :SP]
   [5 :CL]
   [6 :CL]
   [11 :SP]
   [4 :SP]
   [7 :CL]
   [7 :DI]
   [9 :DI]
   [10 :CL]
   [11 :CL]
   [10 :SP]
   [5 :HR]
   [1 :HR]
   [6 :HR]
   [2 :SP]
   [2 :DI]
   [10 :DI]
   [8 :SP]
   [7 :HR]
   [5 :SP]
   [4 :CL]
   [7 :SP]
   [3 :CL]
   [3 :SP]
   [12 :SP]
   [13 :SP]
   [4 :HR]
   [13 :CL]
   [5 :DI]
   [2 :HR]
   [3 :HR]
   [13 :DI]
   [12 :DI])})
clj꞉playing-cards.core꞉> 
({:picked [[1 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [5 :SP] [10 :CL] [12 :CL] [6 :DI]],
  :rest
  ([1 :DI]
   [13 :HR]
   [4 :DI]
   [3 :DI]
   [11 :DI]
   [6 :SP]
   [9 :CL]
   [11 :HR]
   [9 :SP]
   [5 :CL]
   [6 :CL]
   [11 :SP]
   [4 :SP]
   [7 :CL]
   [7 :DI]
   [8 :DI]
   [9 :DI]
   [11 :CL]
   [10 :SP]
   [5 :HR]
   [1 :HR]
   [6 :HR]
   [8 :CL]
   [10 :DI]
   [8 :SP]
   [7 :HR]
   [4 :CL]
   [10 :HR]
   [7 :SP]
   [3 :CL]
   [3 :SP]
   [12 :SP]
   [13 :SP]
   [4 :HR]
   [13 :CL]
   [5 :DI]
   [2 :HR]
   [3 :HR]
   [13 :DI]
   [12 :DI]
   [2 :CL]
   [9 :HR])}
 {:picked [[1 :SP] [8 :SP] [8 :HR] [2 :SP] [1 :CL] [5 :SP] [3 :HR] [9 :HR] [6 :DI] [7 :DI]],
  :rest
  ([1 :DI]
   [13 :HR]
   [4 :DI]
   [3 :DI]
   [11 :DI]
   [6 :SP]
   [9 :CL]
   [11 :HR]
   [9 :SP]
   [5 :CL]
   [6 :CL]
   [11 :SP]
   [4 :SP]
   [7 :CL]
   [12 :HR]
   [8 :DI]
   [9 :DI]
   [10 :CL]
   [11 :CL]
   [10 :SP]
   [5 :HR]
   [1 :HR]
   [6 :HR]
   [2 :DI]
   [8 :CL]
   [10 :DI]
   [12 :CL]
   [7 :HR]
   [4 :CL]
   [10 :HR]
   [7 :SP]
   [3 :CL]
   [3 :SP]
   [12 :SP]
   [13 :SP]
   [4 :HR]
   [13 :CL]
   [5 :DI]
   [2 :HR]
   [13 :DI]
   [12 :DI]
   [2 :CL])}
 {:picked [[1 :SP] [8 :SP] [2 :DI] [12 :HR] [1 :CL] [3 :HR] [10 :CL] [9 :HR] [6 :DI] [7 :DI]],
  :rest
  ([1 :DI]
   [13 :HR]
   [4 :DI]
   [3 :DI]
   [11 :DI]
   [6 :SP]
   [9 :CL]
   [11 :HR]
   [9 :SP]
   [5 :CL]
   [6 :CL]
   [11 :SP]
   [4 :SP]
   [7 :CL]
   [8 :HR]
   [8 :DI]
   [9 :DI]
   [11 :CL]
   [10 :SP]
   [5 :HR]
   [1 :HR]
   [6 :HR]
   [2 :SP]
   [8 :CL]
   [10 :DI]
   [12 :CL]
   [7 :HR]
   [5 :SP]
   [4 :CL]
   [10 :HR]
   [7 :SP]
   [3 :CL]
   [3 :SP]
   [12 :SP]
   [13 :SP]
   [4 :HR]
   [13 :CL]
   [5 :DI]
   [2 :HR]
   [13 :DI]
   [12 :DI]
   [2 :CL])})
clj꞉playing-cards.core꞉> 
[{:picked [[1 :SP] [8 :SP] [8 :HR] [1 :CL] [8 :CL] [5 :SP] [10 :CL] [9 :HR] [6 :DI] [7 :DI]],
  :rest
  ([1 :DI]
   [13 :HR]
   [4 :DI]
   [3 :DI]
   [11 :DI]
   [6 :SP]
   [9 :CL]
   [11 :HR]
   [9 :SP]
   [5 :CL]
   [6 :CL]
   [11 :SP]
   [4 :SP]
   [7 :CL]
   [12 :HR]
   [8 :DI]
   [9 :DI]
   [11 :CL]
   [10 :SP]
   [5 :HR]
   [1 :HR]
   [6 :HR]
   [2 :SP]
   [2 :DI]
   [10 :DI]
   [12 :CL]
   [7 :HR]
   [4 :CL]
   [10 :HR]
   [7 :SP]
   [3 :CL]
   [3 :SP]
   [12 :SP]
   [13 :SP]
   [4 :HR]
   [13 :CL]
   [5 :DI]
   [2 :HR]
   [3 :HR]
   [13 :DI]
   [12 :DI]
   [2 :CL])}
 {:picked [[8 :SP] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL] [9 :HR]],
  :rest
  ([1 :DI]
   [13 :HR]
   [6 :DI]
   [4 :DI]
   [3 :DI]
   [11 :DI]
   [6 :SP]
   [9 :CL]
   [11 :HR]
   [9 :SP]
   [5 :CL]
   [6 :CL]
   [11 :SP]
   [4 :SP]
   [7 :CL]
   [8 :HR]
   [7 :DI]
   [1 :SP]
   [8 :DI]
   [9 :DI]
   [11 :CL]
   [10 :SP]
   [5 :HR]
   [1 :HR]
   [6 :HR]
   [8 :CL]
   [10 :DI]
   [7 :HR]
   [4 :CL]
   [10 :HR]
   [7 :SP]
   [3 :CL]
   [3 :SP]
   [12 :SP]
   [13 :SP]
   [4 :HR]
   [13 :CL]
   [5 :DI]
   [2 :HR]
   [13 :DI]
   [12 :DI]
   [2 :CL])}
 {:picked [[1 :SP] [8 :HR] [2 :DI] [2 :SP] [5 :SP] [3 :HR] [12 :CL] [7 :DI] [2 :CL] [10 :HR]],
  :rest
  ([1 :DI]
   [13 :HR]
   [6 :DI]
   [4 :DI]
   [3 :DI]
   [11 :DI]
   [6 :SP]
   [9 :CL]
   [11 :HR]
   [9 :SP]
   [5 :CL]
   [6 :CL]
   [11 :SP]
   [4 :SP]
   [7 :CL]
   [12 :HR]
   [8 :DI]
   [9 :DI]
   [10 :CL]
   [11 :CL]
   [10 :SP]
   [5 :HR]
   [1 :HR]
   [6 :HR]
   [8 :CL]
   [10 :DI]
   [8 :SP]
   [7 :HR]
   [4 :CL]
   [1 :CL]
   [7 :SP]
   [3 :CL]
   [3 :SP]
   [12 :SP]
   [13 :SP]
   [4 :HR]
   [13 :CL]
   [5 :DI]
   [2 :HR]
   [13 :DI]
   [12 :DI]
   [9 :HR])}]
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1, :picked nil, :rest "clojure.lang.LazySeq@1c0a0d21"}
 #:cards{:linenr 2, :picked nil, :rest "clojure.lang.LazySeq@c86e821d"}
 #:cards{:linenr 3, :picked nil, :rest "clojure.lang.LazySeq@82730a1b"}]
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1, :picked nil, :rest "clojure.lang.LazySeq@855f9930"}
 #:cards{:linenr 2, :picked nil, :rest "clojure.lang.LazySeq@6f094606"}
 #:cards{:linenr 3, :picked nil, :rest "clojure.lang.LazySeq@606c3c9a"}]
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [12 :HR] [1 :CL] [3 :HR] [10 :CL] [9 :HR] [7 :DI] [8 :DI]]",
         :rest "clojure.lang.LazySeq@641d6731"}
 #:cards{:linenr 2,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [12 :HR] [1 :CL] [8 :CL] [5 :SP] [9 :HR] [2 :CL] [8 :DI]]",
         :rest "clojure.lang.LazySeq@b023c50d"}
 #:cards{:linenr 3,
         :picked "[[8 :SP] [2 :DI] [12 :HR] [8 :CL] [3 :HR] [10 :CL] [12 :CL] [6 :DI] [7 :DI] [8 :DI]]",
         :rest "clojure.lang.LazySeq@dc49cb5b"}]
clj꞉playing-cards.core꞉> 
#'playing-cards.core/picked-n-rest
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1,
         :picked "[[8 :SP] [8 :HR] [2 :DI] [2 :SP] [1 :CL] [8 :CL] [3 :HR] [10 :CL] [12 :CL] [6 :DI]]",
         :rest "clojure.lang.LazySeq@964db64e"}
 #:cards{:linenr 2,
         :picked "[[1 :SP] [8 :SP] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [8 :CL] [5 :SP] [3 :HR] [10 :CL]]",
         :rest "clojure.lang.LazySeq@73c22dd"}
 #:cards{:linenr 3,
         :picked "[[8 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [8 :CL] [3 :HR] [10 :CL] [12 :CL]]",
         :rest "clojure.lang.LazySeq@daa841b6"}]
clj꞉playing-cards.core꞉> 
#'playing-cards.core/picked-n-rest
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1,
         :picked "[[1 :SP] [8 :SP] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [8 :CL] [3 :HR] [9 :HR] [6 :DI]]",
         :rest "clojure.lang.LazySeq@660b6e5c"}
 #:cards{:linenr 2,
         :picked "[[8 :SP] [8 :HR] [12 :HR] [1 :CL] [8 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL] [9 :HR]]",
         :rest "clojure.lang.LazySeq@ae617d1e"}
 #:cards{:linenr 3,
         :picked "[[1 :SP] [8 :SP] [2 :DI] [8 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL] [8 :DI] [1 :HR]]",
         :rest "clojure.lang.LazySeq@4fb05461"}]
clj꞉playing-cards.core꞉> 
#'playing-cards.core/picked-n-rest
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [1 :CL] [8 :CL] [5 :SP] [12 :CL] [6 :DI] [10 :HR] [11 :DI]]",
         :rest "clojure.lang.LazySeq@bdae5b6f"}
 #:cards{:linenr 2,
         :picked "[[1 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [7 :DI] [8 :DI] [1 :HR] [11 :DI]]",
         :rest "clojure.lang.LazySeq@714c615a"}
 #:cards{:linenr 3,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [3 :HR] [9 :HR] [7 :DI]]",
         :rest "clojure.lang.LazySeq@d63bf3e"}]
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [8 :CL] [10 :CL] [9 :HR] [7 :DI]]",
         :rest "clojure.lang.LazySeq@b7764cf9"}
 #:cards{:linenr 2,
         :picked "[[8 :HR] [2 :DI] [12 :HR] [8 :CL] [5 :SP] [10 :CL] [9 :HR] [6 :DI] [2 :CL] [8 :DI]]",
         :rest "clojure.lang.LazySeq@ebc30de7"}
 #:cards{:linenr 3,
         :picked "[[8 :SP] [2 :DI] [2 :SP] [8 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL] [7 :DI] [2 :CL]]",
         :rest "clojure.lang.LazySeq@43f55c39"}]
clj꞉playing-cards.core꞉> 
#'playing-cards.core/picked-n-rest
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [2 :DI] [2 :SP] [1 :CL] [8 :CL] [5 :SP] [3 :HR] [12 :CL]]",
         :rest "clojure.lang.LazySeq@9a388a1f"}
 #:cards{:linenr 2,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [8 :CL] [5 :SP] [3 :HR]]",
         :rest "clojure.lang.LazySeq@ffe95dd2"}
 #:cards{:linenr 3,
         :picked "[[1 :SP] [2 :DI] [2 :SP] [1 :CL] [3 :HR] [10 :CL] [6 :DI] [7 :DI] [2 :CL] [1 :HR]]",
         :rest "clojure.lang.LazySeq@f799132"}]
clj꞉playing-cards.core꞉> 
#'playing-cards.core/picked-n-rest
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [2 :DI] [2 :SP] [5 :SP] [10 :CL] [12 :CL] [9 :HR] [6 :DI]]",
         :rest
         "[[1 :DI] [13 :HR] [4 :DI] [3 :DI] [11 :DI] [6 :SP] [9 :CL] [11 :HR] [9 :SP] [5 :CL] [6 :CL] [11 :SP] [4 :SP] [7 :CL] [12 :HR] [7 :DI] [8 :DI] [9 :DI] [11 :CL] [10 :SP] [5 :HR] [1 :HR] [6 :HR] [8 :CL] [10 :DI] [7 :HR] [4 :CL] [1 :CL] [10 :HR] [7 :SP] [3 :CL] [3 :SP] [12 :SP] [13 :SP] [4 :HR] [13 :CL] [5 :DI] [2 :HR] [3 :HR] [13 :DI] [12 :DI] [2 :CL]]"}
 #:cards{:linenr 2,
         :picked "[[1 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [10 :CL] [12 :CL] [6 :DI] [2 :CL] [8 :DI]]",
         :rest
         "[[1 :DI] [13 :HR] [4 :DI] [3 :DI] [11 :DI] [6 :SP] [9 :CL] [11 :HR] [9 :SP] [5 :CL] [6 :CL] [11 :SP] [4 :SP] [7 :CL] [7 :DI] [9 :DI] [11 :CL] [10 :SP] [5 :HR] [1 :HR] [6 :HR] [8 :CL] [10 :DI] [8 :SP] [7 :HR] [5 :SP] [4 :CL] [1 :CL] [10 :HR] [7 :SP] [3 :CL] [3 :SP] [12 :SP] [13 :SP] [4 :HR] [13 :CL] [5 :DI] [2 :HR] [3 :HR] [13 :DI] [12 :DI] [9 :HR]]"}
 #:cards{:linenr 3,
         :picked "[[8 :SP] [2 :DI] [12 :HR] [1 :CL] [8 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL] [6 :DI]]",
         :rest
         "[[1 :DI] [13 :HR] [4 :DI] [3 :DI] [11 :DI] [6 :SP] [9 :CL] [11 :HR] [9 :SP] [5 :CL] [6 :CL] [11 :SP] [4 :SP] [7 :CL] [8 :HR] [7 :DI] [1 :SP] [8 :DI] [9 :DI] [11 :CL] [10 :SP] [5 :HR] [1 :HR] [6 :HR] [2 :SP] [10 :DI] [7 :HR] [4 :CL] [10 :HR] [7 :SP] [3 :CL] [3 :SP] [12 :SP] [13 :SP] [4 :HR] [13 :CL] [5 :DI] [2 :HR] [13 :DI] [12 :DI] [2 :CL] [9 :HR]]"}]
clj꞉playing-cards.core꞉> 
#'playing-cards.core/picked-n-rest
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [2 :DI] [12 :HR] [1 :CL] [5 :SP] [10 :CL] [12 :CL] [6 :DI]]",
         :rest
         "[[1 :DI] [13 :HR] [4 :DI] [3 :DI] [11 :DI] [6 :SP] [9 :CL] [11 :HR] [9 :SP] [5 :CL] [6 :CL] [11 :SP] [4 :SP] [7 :CL] [7 :DI] [8 :DI] [9 :DI] [11 :CL] [10 :SP] [5 :HR] [1 :HR] [6 :HR] [2 :SP] [8 :CL] [10 :DI] [7 :HR] [4 :CL] [10 :HR] [7 :SP] [3 :CL] [3 :SP] [12 :SP] [13 :SP] [4 :HR] [13 :CL] [5 :DI] [2 :HR] [3 :HR] [13 :DI] [12 :DI] [2 :CL] [9 :HR]]"}
 #:cards{:linenr 2,
         :picked "[[1 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [8 :CL] [10 :CL] [12 :CL] [9 :HR]]",
         :rest
         "[[1 :DI] [13 :HR] [6 :DI] [4 :DI] [3 :DI] [11 :DI] [6 :SP] [9 :CL] [11 :HR] [9 :SP] [5 :CL] [6 :CL] [11 :SP] [4 :SP] [7 :CL] [7 :DI] [8 :DI] [9 :DI] [11 :CL] [10 :SP] [5 :HR] [1 :HR] [6 :HR] [10 :DI] [8 :SP] [7 :HR] [5 :SP] [4 :CL] [10 :HR] [7 :SP] [3 :CL] [3 :SP] [12 :SP] [13 :SP] [4 :HR] [13 :CL] [5 :DI] [2 :HR] [3 :HR] [13 :DI] [12 :DI] [2 :CL]]"}
 #:cards{:linenr 3,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [2 :DI] [2 :SP] [1 :CL] [5 :SP] [3 :HR] [10 :CL] [9 :HR]]",
         :rest
         "[[1 :DI] [13 :HR] [6 :DI] [4 :DI] [3 :DI] [11 :DI] [6 :SP] [9 :CL] [11 :HR] [9 :SP] [5 :CL] [6 :CL] [11 :SP] [4 :SP] [7 :CL] [12 :HR] [7 :DI] [8 :DI] [9 :DI] [11 :CL] [10 :SP] [5 :HR] [1 :HR] [6 :HR] [8 :CL] [10 :DI] [12 :CL] [7 :HR] [4 :CL] [10 :HR] [7 :SP] [3 :CL] [3 :SP] [12 :SP] [13 :SP] [4 :HR] [13 :CL] [5 :DI] [2 :HR] [13 :DI] [12 :DI] [2 :CL]]"}]
clj꞉playing-cards.core꞉> 
(nil nil nil)
clj꞉playing-cards.core꞉> 
(nil nil nil)
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [2 :DI] [12 :HR] [1 :CL] [5 :SP] [3 :HR] [10 :CL] [9 :HR]]",
         :rest
         "[[1 :DI] [13 :HR] [6 :DI] [4 :DI] [3 :DI] [11 :DI] [6 :SP] [9 :CL] [11 :HR] [9 :SP] [5 :CL] [6 :CL] [11 :SP] [4 :SP] [7 :CL] [7 :DI] [8 :DI] [9 :DI] [11 :CL] [10 :SP] [5 :HR] [1 :HR] [6 :HR] [2 :SP] [8 :CL] [10 :DI] [12 :CL] [7 :HR] [4 :CL] [10 :HR] [7 :SP] [3 :CL] [3 :SP] [12 :SP] [13 :SP] [4 :HR] [13 :CL] [5 :DI] [2 :HR] [13 :DI] [12 :DI] [2 :CL]]"}
 #:cards{:linenr 2,
         :picked "[[1 :SP] [8 :SP] [2 :DI] [2 :SP] [1 :CL] [8 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL]]",
         :rest
         "[[1 :DI] [13 :HR] [6 :DI] [4 :DI] [3 :DI] [11 :DI] [6 :SP] [9 :CL] [11 :HR] [9 :SP] [5 :CL] [6 :CL] [11 :SP] [4 :SP] [7 :CL] [12 :HR] [8 :HR] [7 :DI] [8 :DI] [9 :DI] [11 :CL] [10 :SP] [5 :HR] [1 :HR] [6 :HR] [10 :DI] [7 :HR] [4 :CL] [10 :HR] [7 :SP] [3 :CL] [3 :SP] [12 :SP] [13 :SP] [4 :HR] [13 :CL] [5 :DI] [2 :HR] [13 :DI] [12 :DI] [2 :CL] [9 :HR]]"}
 #:cards{:linenr 3,
         :picked "[[1 :SP] [8 :SP] [8 :HR] [2 :SP] [8 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL] [9 :HR]]",
         :rest
         "[[1 :DI] [13 :HR] [6 :DI] [4 :DI] [3 :DI] [11 :DI] [6 :SP] [9 :CL] [11 :HR] [9 :SP] [5 :CL] [6 :CL] [11 :SP] [4 :SP] [7 :CL] [12 :HR] [7 :DI] [8 :DI] [9 :DI] [11 :CL] [10 :SP] [5 :HR] [1 :HR] [6 :HR] [2 :DI] [10 :DI] [7 :HR] [4 :CL] [1 :CL] [10 :HR] [7 :SP] [3 :CL] [3 :SP] [12 :SP] [13 :SP] [4 :HR] [13 :CL] [5 :DI] [2 :HR] [13 :DI] [12 :DI] [2 :CL]]"}]
clj꞉playing-cards.core꞉> 
#'playing-cards.core/get-deck-string
clj꞉playing-cards.core꞉> 
"1 SP,2 SP,3 SP,4 SP,5 SP,6 SP,7 SP,8 SP,9 SP,10 SP,11 SP,12 SP,13 SP,1 HR,2 HR,3 HR,4 HR,5 HR,6 HR,7 HR,8 HR,9 HR,10 HR,11 HR,12 HR,13 HR,1 DI,2 DI,3 DI,4 DI,5 DI,6 DI,7 DI,8 DI,9 DI,10 DI,11 DI,12 DI,13 DI,1 CL,2 CL,3 CL,4 CL,5 CL,6 CL,7 CL,8 CL,9 CL,10 CL,11 CL,12 CL,13 CL"
clj꞉playing-cards.core꞉> 
[#:cards{:linenr 1,
         :picked "1 SP,8 SP,2 DI,12 HR,1 CL,8 CL,5 SP,3 HR,9 HR,7 DI",
         :rest
         "1 DI,13 HR,6 DI,4 DI,3 DI,11 DI,6 SP,9 CL,11 HR,9 SP,5 CL,6 CL,11 SP,4 SP,7 CL,8 HR,8 DI,9 DI,10 CL,11 CL,10 SP,5 HR,1 HR,6 HR,2 SP,10 DI,12 CL,7 HR,4 CL,10 HR,7 SP,3 CL,3 SP,12 SP,13 SP,4 HR,13 CL,5 DI,2 HR,13 DI,12 DI,2 CL"}
 #:cards{:linenr 2,
         :picked "1 SP,8 SP,2 DI,2 SP,5 SP,12 CL,9 HR,6 DI,2 CL,8 DI",
         :rest
         "1 DI,13 HR,4 DI,3 DI,11 DI,6 SP,9 CL,11 HR,9 SP,5 CL,6 CL,11 SP,4 SP,7 CL,12 HR,8 HR,7 DI,9 DI,10 CL,11 CL,10 SP,5 HR,1 HR,6 HR,8 CL,10 DI,7 HR,4 CL,1 CL,10 HR,7 SP,3 CL,3 SP,12 SP,13 SP,4 HR,13 CL,5 DI,2 HR,3 HR,13 DI,12 DI"}
 #:cards{:linenr 3,
         :picked "12 HR,1 CL,5 SP,12 CL,9 HR,7 DI,2 CL,8 DI,1 HR,10 HR",
         :rest
         "1 DI,13 HR,6 DI,4 DI,3 DI,11 DI,6 SP,9 CL,11 HR,9 SP,5 CL,6 CL,11 SP,4 SP,7 CL,8 HR,1 SP,9 DI,10 CL,11 CL,10 SP,5 HR,6 HR,2 SP,2 DI,8 CL,10 DI,8 SP,7 HR,4 CL,7 SP,3 CL,3 SP,12 SP,13 SP,4 HR,13 CL,5 DI,2 HR,3 HR,13 DI,12 DI"}]
clj꞉playing-cards.core꞉> 
(false false false)
clj꞉playing-cards.core꞉> 
("::[[1 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [8 :CL] [5 :SP] [3 :HR] [10 :CL]]"
 "::[[1 :SP] [8 :SP] [2 :DI] [2 :SP] [12 :HR] [8 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL]]"
 "::[[8 :SP] [2 :DI] [2 :SP] [12 :HR] [8 :CL] [3 :HR] [10 :CL] [6 :DI] [7 :DI] [2 :CL]]")
clj꞉playing-cards.core꞉> 
("#:cards{:linenr 1, :picked \"1 SP,8 HR,2 DI,1 CL,8 CL,5 SP,3 HR,12 CL,9 HR,10 HR\", :rest \"1 DI,13 HR,6 DI,4 DI,3 DI,11 DI,6 SP,9 CL,11 HR,9 SP,5 CL,6 CL,11 SP,4 SP,7 CL,12 HR,7 DI,8 DI,9 DI,10 CL,11 CL,10 SP,5 HR,1 HR,6 HR,2 SP,10 DI,8 SP,7 HR,4 CL,7 SP,3 CL,3 SP,12 SP,13 SP,4 HR,13 CL,5 DI,2 HR,13 DI,12 DI,2 CL\"}::::[[1 :SP] [8 :HR] [2 :DI] [1 :CL] [8 :CL] [5 :SP] [3 :HR] [12 :CL] [9 :HR] [10 :HR]]"
 "#:cards{:linenr 2, :picked \"8 HR,2 SP,12 HR,1 CL,5 SP,3 HR,9 HR,6 DI,7 DI,2 CL\", :rest \"1 DI,13 HR,4 DI,3 DI,11 DI,6 SP,9 CL,11 HR,9 SP,5 CL,6 CL,11 SP,4 SP,7 CL,1 SP,8 DI,9 DI,10 CL,11 CL,10 SP,5 HR,1 HR,6 HR,2 DI,8 CL,10 DI,12 CL,8 SP,7 HR,4 CL,10 HR,7 SP,3 CL,3 SP,12 SP,13 SP,4 HR,13 CL,5 DI,2 HR,13 DI,12 DI\"}::::[[8 :HR] [2 :SP] [12 :HR] [1 :CL] [5 :SP] [3 :HR] [9 :HR] [6 :DI] [7 :DI] [2 :CL]]"
 "#:cards{:linenr 3, :picked \"1 SP,8 HR,12 HR,1 CL,5 SP,3 HR,10 CL,9 HR,6 DI,7 DI\", :rest \"1 DI,13 HR,4 DI,3 DI,11 DI,6 SP,9 CL,11 HR,9 SP,5 CL,6 CL,11 SP,4 SP,7 CL,8 DI,9 DI,11 CL,10 SP,5 HR,1 HR,6 HR,2 SP,2 DI,8 CL,10 DI,12 CL,8 SP,7 HR,4 CL,10 HR,7 SP,3 CL,3 SP,12 SP,13 SP,4 HR,13 CL,5 DI,2 HR,13 DI,12 DI,2 CL\"}::::[[1 :SP] [8 :HR] [12 :HR] [1 :CL] [5 :SP] [3 :HR] [10 :CL] [9 :HR] [6 :DI] [7 :DI]]")
clj꞉playing-cards.core꞉> 
; Syntax error compiling at (core.clj:158:10).
; No such var: jdbc/query
clj꞉playing-cards.core꞉> 
("#:cards{:linenr 1, :picked \"1 SP,8 SP,8 HR,12 HR,1 CL,3 HR,10 CL,12 CL,9 HR,2 CL\", :rest \"1 DI,13 HR,6 DI,4 DI,3 DI,11 DI,6 SP,9 CL,11 HR,9 SP,5 CL,6 CL,11 SP,4 SP,7 CL,7 DI,8 DI,9 DI,11 CL,10 SP,5 HR,1 HR,6 HR,2 SP,2 DI,8 CL,10 DI,7 HR,5 SP,4 CL,10 HR,7 SP,3 CL,3 SP,12 SP,13 SP,4 HR,13 CL,5 DI,2 HR,13 DI,12 DI\"}::::[[1 :SP] [8 :SP] [8 :HR] [12 :HR] [1 :CL] [3 :HR] [10 :CL] [12 :CL] [9 :HR] [2 :CL]]"
 "#:cards{:linenr 2, :picked \"1 SP,8 SP,2 SP,5 SP,3 HR,10 CL,6 DI,2 CL,10 HR,11 DI\", :rest \"1 DI,13 HR,4 DI,3 DI,6 SP,9 CL,11 HR,9 SP,5 CL,6 CL,11 SP,4 SP,7 CL,12 HR,8 HR,7 DI,8 DI,9 DI,11 CL,10 SP,5 HR,1 HR,6 HR,2 DI,8 CL,10 DI,12 CL,7 HR,4 CL,1 CL,7 SP,3 CL,3 SP,12 SP,13 SP,4 HR,13 CL,5 DI,2 HR,13 DI,12 DI,9 HR\"}::::[[1 :SP] [8 :SP] [2 :SP] [5 :SP] [3 :HR] [10 :CL] [6 :DI] [2 :CL] [10 :HR] [11 :DI]]"
 "#:cards{:linenr 3, :picked \"8 SP,8 HR,2 DI,2 SP,12 HR,1 CL,8 CL,5 SP,3 HR,10 CL\", :rest \"1 DI,13 HR,6 DI,4 DI,3 DI,11 DI,6 SP,9 CL,11 HR,9 SP,5 CL,6 CL,11 SP,4 SP,7 CL,7 DI,1 SP,8 DI,9 DI,11 CL,10 SP,5 HR,1 HR,6 HR,10 DI,12 CL,7 HR,4 CL,10 HR,7 SP,3 CL,3 SP,12 SP,13 SP,4 HR,13 CL,5 DI,2 HR,13 DI,12 DI,2 CL,9 HR\"}::::[[8 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [1 :CL] [8 :CL] [5 :SP] [3 :HR] [10 :CL]]")
clj꞉playing-cards.core꞉> 
("::::[[1 :SP] [8 :SP] [2 :DI] [8 :CL] [5 :SP] [10 :CL] [12 :CL] [9 :HR] [6 :DI] [7 :DI]]"
 "::::[[8 :SP] [8 :HR] [2 :SP] [12 :HR] [8 :CL] [5 :SP] [3 :HR] [9 :HR] [2 :CL] [1 :HR]]"
 "::::[[1 :SP] [8 :SP] [8 :HR] [12 :HR] [1 :CL] [8 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL]]")
clj꞉playing-cards.core꞉> 
; Syntax error reading source at (REPL:156:37).
; Namespaced map must specify a map
clj꞉playing-cards.core꞉> 
("::::[[1 :SP] [8 :SP] [8 :HR] [2 :DI] [2 :SP] [12 :HR] [8 :CL] [3 :HR] [10 :CL] [7 :DI]]"
 "::::[[1 :SP] [8 :SP] [8 :HR] [2 :DI] [12 :HR] [8 :CL] [5 :SP] [3 :HR] [12 :CL] [6 :DI]]"
 "::::[[1 :SP] [8 :SP] [2 :SP] [1 :CL] [8 :CL] [3 :HR] [10 :CL] [9 :HR] [6 :DI] [7 :DI]]")
clj꞉playing-cards.core꞉> 
("2 DI,2 SP,8 CL,5 SP,3 HR,10 CL,12 CL,9 HR,7 DI,2 CL::2 DI,2 SP,8 CL,5 SP,3 HR,10 CL,12 CL,9 HR,7 DI,2 CL::[[2 :DI] [2 :SP] [8 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL] [9 :HR] [7 :DI] [2 :CL]]"
 "1 SP,8 SP,2 DI,8 CL,3 HR,12 CL,9 HR,6 DI,7 DI,2 CL::1 SP,8 SP,2 DI,8 CL,3 HR,12 CL,9 HR,6 DI,7 DI,2 CL::[[1 :SP] [8 :SP] [2 :DI] [8 :CL] [3 :HR] [12 :CL] [9 :HR] [6 :DI] [7 :DI] [2 :CL]]"
 "1 SP,2 DI,1 CL,8 CL,5 SP,3 HR,10 CL,12 CL,9 HR,6 DI::1 SP,2 DI,1 CL,8 CL,5 SP,3 HR,10 CL,12 CL,9 HR,6 DI::[[1 :SP] [2 :DI] [1 :CL] [8 :CL] [5 :SP] [3 :HR] [10 :CL] [12 :CL] [9 :HR] [6 :DI]]")
clj꞉playing-cards.core꞉> 
("1 SP,8 HR,2 DI,12 HR,8 CL,5 SP,10 CL,12 CL,6 DI,7 DI::[[1 :SP] [8 :HR] [2 :DI] [12 :HR] [8 :CL] [5 :SP] [10 :CL] [12 :CL] [6 :DI] [7 :DI]]"
 "1 SP,8 SP,8 HR,2 SP,12 HR,5 SP,10 CL,12 CL,6 DI,7 DI::[[1 :SP] [8 :SP] [8 :HR] [2 :SP] [12 :HR] [5 :SP] [10 :CL] [12 :CL] [6 :DI] [7 :DI]]"
 "8 SP,2 SP,12 HR,8 CL,3 HR,10 CL,12 CL,9 HR,7 DI,2 CL::[[8 :SP] [2 :SP] [12 :HR] [8 :CL] [3 :HR] [10 :CL] [12 :CL] [9 :HR] [7 :DI] [2 :CL]]")
clj꞉playing-cards.core꞉> 
("1 SP,8 HR,2 DI,2 SP,12 HR,8 CL,5 SP,3 HR,10 CL,12 CL::1 SP,8 HR,2 DI,2 SP,12 HR,8 CL,5 SP,3 HR,10 CL,12 CL"
 "1 SP,8 SP,8 HR,2 DI,2 SP,1 CL,8 CL,3 HR,10 CL,12 CL::1 SP,8 SP,8 HR,2 DI,2 SP,1 CL,8 CL,3 HR,10 CL,12 CL"
 "1 SP,8 HR,2 DI,12 HR,8 CL,3 HR,10 CL,7 DI,8 DI,11 DI::1 SP,8 HR,2 DI,12 HR,8 CL,3 HR,10 CL,7 DI,8 DI,11 DI")
clj꞉playing-cards.core꞉> 
(nil nil nil)
clj꞉playing-cards.core꞉> 
(nil nil nil)
clj꞉playing-cards.core꞉> 
("8 SP,2 DI,2 SP,12 HR,1 CL,5 SP,3 HR,10 CL,9 HR,2 CL::8 SP,2 DI,2 SP,12 HR,1 CL,5 SP,3 HR,10 CL,9 HR,2 CL"
 "1 SP,8 SP,8 HR,2 SP,12 HR,1 CL,3 HR,10 CL,12 CL,6 DI::1 SP,8 SP,8 HR,2 SP,12 HR,1 CL,3 HR,10 CL,12 CL,6 DI"
 "1 SP,8 SP,8 HR,2 DI,2 SP,12 HR,5 SP,10 CL,9 HR,2 CL::1 SP,8 SP,8 HR,2 DI,2 SP,12 HR,5 SP,10 CL,9 HR,2 CL")
clj꞉playing-cards.core꞉> 
(true true true)
clj꞉playing-cards.core꞉> 
(true true true)
clj꞉playing-cards.core꞉> 
(true true true true true)
clj꞉playing-cards.core꞉> 
(true true true true true)
clj꞉playing-cards.core꞉> 
Dump the results to a database of your choice (in-memory welcome)
nil
clj꞉playing-cards.core꞉> 
I'll do 5 sets. Results are: clojure.lang.LazySeq@47ba19ae
nil
clj꞉playing-cards.core꞉> 
I'll do 5 sets. Results are: [true true true true true]
nil
clj꞉playing-cards.core꞉> 
nil
clj꞉playing-cards.core꞉> 
I'll do 5 sets. Results are: [true true true true true]
(nil nil nil nil nil)
clj꞉playing-cards.core꞉> 
